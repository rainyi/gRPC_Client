// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ChatService.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// enums
enum Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case join // = 0
  case leave // = 1
  case chat // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .join
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .join
    case 1: self = .leave
    case 2: self = .chat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .join: return 0
    case .leave: return 1
    case .chat: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand] = [
    .join,
    .leave,
    .chat,
  ]
}

#endif  // swift(>=4.2)

/// messages
/// ChatRoom messages
struct Com_Ncsoft_Aiss_Chat_Paige_V1_ChatRoom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var title: String = String()

  var size: Int32 = 0

  var createdAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_CreateChatRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatRoomID: String = String()

  var chatRoomTitle: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_RemoveChatRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatRoomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_GetChatRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatRoomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatRooms: [Com_Ncsoft_Aiss_Chat_Paige_V1_ChatRoom] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ChatStream messages
struct Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand = .join

  var chatRoomID: String = String()

  var userID: String = String()

  var userName: String = String()

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand = .join

  var chatRoomID: String = String()

  var userID: String = String()

  var userName: String = String()

  var message: String = String()

  var epochMillis: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.ncsoft.aiss.chat.paige.v1"

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamCommand: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOIN"),
    1: .same(proto: "LEAVE"),
    2: .same(proto: "CHAT"),
  ]
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ChatRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatRoom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "size"),
    4: .same(proto: "createdAt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.size) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatRoom, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatRoom) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.size != rhs.size {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_CreateChatRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateChatRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chatRoomId"),
    2: .same(proto: "chatRoomTitle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatRoomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chatRoomTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomID, fieldNumber: 1)
    }
    if !self.chatRoomTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomTitle, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_CreateChatRoomRequest, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_CreateChatRoomRequest) -> Bool {
    if lhs.chatRoomID != rhs.chatRoomID {return false}
    if lhs.chatRoomTitle != rhs.chatRoomTitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_RemoveChatRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveChatRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chatRoomId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatRoomID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_RemoveChatRoomRequest, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_RemoveChatRoomRequest) -> Bool {
    if lhs.chatRoomID != rhs.chatRoomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_GetChatRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChatRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chatRoomId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatRoomID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetChatRoomRequest, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetChatRoomRequest) -> Bool {
    if lhs.chatRoomID != rhs.chatRoomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllChatRoomRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomRequest, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllChatRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chatRooms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.chatRooms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatRooms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chatRooms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomResponse, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_GetAllChatRoomResponse) -> Bool {
    if lhs.chatRooms != rhs.chatRooms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatStreamRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    10: .same(proto: "chatRoomId"),
    11: .same(proto: "userId"),
    12: .same(proto: "userName"),
    13: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.command) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.chatRoomID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.command != .join {
      try visitor.visitSingularEnumField(value: self.command, fieldNumber: 1)
    }
    if !self.chatRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomID, fieldNumber: 10)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 11)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 12)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamRequest, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamRequest) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.chatRoomID != rhs.chatRoomID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatStreamResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    10: .same(proto: "chatRoomId"),
    11: .same(proto: "userId"),
    12: .same(proto: "userName"),
    13: .same(proto: "message"),
    100: .same(proto: "epochMillis"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.command) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.chatRoomID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 100: try { try decoder.decodeSingularInt64Field(value: &self.epochMillis) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.command != .join {
      try visitor.visitSingularEnumField(value: self.command, fieldNumber: 1)
    }
    if !self.chatRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatRoomID, fieldNumber: 10)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 11)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 12)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 13)
    }
    if self.epochMillis != 0 {
      try visitor.visitSingularInt64Field(value: self.epochMillis, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamResponse, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ChatStreamResponse) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.chatRoomID != rhs.chatRoomID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.message != rhs.message {return false}
    if lhs.epochMillis != rhs.epochMillis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
