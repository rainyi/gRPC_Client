// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Error.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorCode: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// CHATROOM (starts from 0)
  case chatroomNotExist // = 0
  case chatroomAlreadyExist // = 1
  case chatroomNotJoined // = 2
  case chatroomAlreadyJoined // = 3

  /// INTERNAL
  case internalServerError // = 500
  case UNRECOGNIZED(Int)

  init() {
    self = .chatroomNotExist
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .chatroomNotExist
    case 1: self = .chatroomAlreadyExist
    case 2: self = .chatroomNotJoined
    case 3: self = .chatroomAlreadyJoined
    case 500: self = .internalServerError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .chatroomNotExist: return 0
    case .chatroomAlreadyExist: return 1
    case .chatroomNotJoined: return 2
    case .chatroomAlreadyJoined: return 3
    case .internalServerError: return 500
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorCode] = [
    .chatroomNotExist,
    .chatroomAlreadyExist,
    .chatroomNotJoined,
    .chatroomAlreadyJoined,
    .internalServerError,
  ]
}

#endif  // swift(>=4.2)

struct Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var errorCode: Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorCode = .chatroomNotExist

  var message: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.ncsoft.aiss.chat.paige.v1"

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHATROOM_NOT_EXIST"),
    1: .same(proto: "CHATROOM_ALREADY_EXIST"),
    2: .same(proto: "CHATROOM_NOT_JOINED"),
    3: .same(proto: "CHATROOM_ALREADY_JOINED"),
    500: .same(proto: "INTERNAL_SERVER_ERROR"),
  ]
}

extension Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errorCode"),
    10: .same(proto: "message"),
    20: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.errorCode) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != .chatroomNotExist {
      try visitor.visitSingularEnumField(value: self.errorCode, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 10)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorResponse, rhs: Com_Ncsoft_Aiss_Chat_Paige_V1_ErrorResponse) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.message != rhs.message {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
